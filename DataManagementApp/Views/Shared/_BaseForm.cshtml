@using System.ComponentModel.DataAnnotations
@using System.Linq
@using System.Reflection

@model DataManagementApp.ViewModels.BaseViewModel<dynamic>

@{
    ViewData["Title"] = Model.PageTitle;
    Layout = "_BaseLayout";
}

<div class="card">
    <div class="card-header">
        <h3 class="card-title">@Model.PageTitle</h3>
        <div class="card-tools">
            <a asp-action="Index" class="btn btn-secondary">返回列表</a>
        </div>
    </div>
    <div class="card-body">
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">
                @TempData["SuccessMessage"]
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger">
                @TempData["ErrorMessage"]
            </div>
        }
        
        <form asp-action="@Model.FormAction" asp-controller="@Model.FormController" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            
            @if (Model.Entity.GetType().GetProperty("Id") != null && 
                 (int)Model.Entity.GetType().GetProperty("Id").GetValue(Model.Entity) != 0)
            {
                <input type="hidden" asp-for="@Model.Entity.GetType().GetProperty("Id").GetValue(Model.Entity)" name="Id" />
            }
            
            @foreach (var prop in Model.Entity.GetType().GetProperties())
            {
                if (prop.Name == "Id" || prop.Name == "CreatedAt" || prop.Name == "UpdatedAt" || prop.Name == "IsDeleted")
                {
                    continue;
                }
                
                var displayAttr = prop.GetCustomAttributes(typeof(DisplayAttribute), false)
                    .FirstOrDefault() as DisplayAttribute;
                var displayName = displayAttr?.Name ?? prop.Name;
                
                <div class="form-group">
                    <label class="control-label">@displayName</label>
                    
                    @if (prop.PropertyType == typeof(bool))
                    {
                        <div class="form-check">
                            <input type="checkbox" asp-for="@Model.Entity.GetType().GetProperty(prop.Name).GetValue(Model.Entity)" 
                                   class="form-check-input" name="@prop.Name" />
                        </div>
                    }
                    else if (prop.PropertyType == typeof(DateTime) || prop.PropertyType == typeof(DateTime?))
                    {
                        <input type="datetime-local" asp-for="@Model.Entity.GetType().GetProperty(prop.Name).GetValue(Model.Entity)" 
                               class="form-control" name="@prop.Name" />
                    }
                    else if (prop.PropertyType.IsEnum)
                    {
                        <select asp-for="@Model.Entity.GetType().GetProperty(prop.Name).GetValue(Model.Entity)" 
                                class="form-control" name="@prop.Name">
                            @foreach (var value in Enum.GetValues(prop.PropertyType))
                            {
                                <option value="@value">@value</option>
                            }
                        </select>
                    }
                    else
                    {
                        <input asp-for="@Model.Entity.GetType().GetProperty(prop.Name).GetValue(Model.Entity)" 
                               class="form-control" name="@prop.Name" />
                    }
                    
                    <span asp-validation-for="@Model.Entity.GetType().GetProperty(prop.Name).GetValue(Model.Entity)" 
                          class="text-danger"></span>
                </div>
            }
            
            <div class="form-group">
                <input type="submit" value="保存" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
